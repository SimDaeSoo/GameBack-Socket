{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.ts","webpack:///./src/game/class/collisionEngine.ts","webpack:///./src/game/class/mapGenerator.ts","webpack:///./src/game/define.ts","webpack:///./src/game/gameData.ts","webpack:///./src/game/gameLogic.ts","webpack:///./src/game/gameServer.ts","webpack:///./src/game/room.ts","webpack:///./src/game/roomManager.ts","webpack:///./src/game/updater.ts","webpack:///./src/index.ts","webpack:///./src/utils/utils.ts","webpack:///external \"body-parser\"","webpack:///external \"debug\"","webpack:///external \"express\"","webpack:///external \"http\"","webpack:///external \"morgan\"","webpack:///external \"socket.io\""],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFa;AACb;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,gBAAgB,mBAAO,CAAC,gDAAoB;AAC5C,gBAAgB,mBAAO,CAAC,wBAAS;AACjC,eAAe,mBAAO,CAAC,sBAAQ;AAC/B,mBAAmB,mBAAO,CAAC,gCAAa;AACxC,aAAa,mBAAO,CAAC,kBAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0CAA0C,gBAAgB;AAC1D,gDAAgD,0DAA0D;AAC1G;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7Ca;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa,oDAAoD;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1Ha;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,uCAAW;AACpC,gBAAgB,mBAAO,CAAC,+CAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,+BAA+B;AACrE,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,+BAA+B;AAClF,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAA4D;AAC/E,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA,uBAAuB,wEAAwE;AAC/F,qBAAqB,aAAa;AAClC,0BAA0B,aAAa;AACvC,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjFa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;;;;;;;;;;;;;ACLa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChFa;AACb;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,uBAAuB,mBAAO,CAAC,8DAAsB;AACrD,0BAA0B,mBAAO,CAAC,oEAAyB;AAC3D,iBAAiB,mBAAO,CAAC,sCAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,sBAAsB;AACtB,2BAA2B,oBAAoB;AAC/C,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/Ha;AACb,8CAA8C,cAAc;AAC5D,gBAAgB,mBAAO,CAAC,4CAAgB;AACxC,iBAAiB,mBAAO,CAAC,4BAAW;AACpC,sBAAsB,mBAAO,CAAC,gDAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,qBAAqB;AAC7D,kDAAkD,yBAAyB,EAAE;AAC7E;AACA;AACA,0BAA0B,iBAAiB,MAAM,GAAG;AACpD;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB,UAAU,GAAG;AACxD,iCAAiC,+BAA+B,EAAE;AAClE,mDAAmD,6CAA6C,EAAE;AAClG,2CAA2C,qCAAqC,EAAE;AAClF,yCAAyC,mCAAmC,EAAE;AAC9E,uCAAuC,+BAA+B,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB,UAAU,GAAG;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAA0C;AACrE,yBAAyB,aAAa;AACtC,8BAA8B,kBAAkB;AAChD,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ,SAAS,UAAU;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iEAAiE;AAClG,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ,SAAS,UAAU;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3Ja;AACb;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,oBAAoB,mBAAO,CAAC,4CAAa;AACzC,kBAAkB,mBAAO,CAAC,wCAAW;AACrC,mBAAmB,mBAAO,CAAC,0CAAY;AACvC,gBAAgB,mBAAO,CAAC,4CAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1Da;AACb,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,kCAAQ;AAC/B,gBAAgB,mBAAO,CAAC,4CAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB,aAAa,GAAG;AACzD;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB,uBAAuB,GAAG;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB,UAAU,IAAI,qBAAqB,GAAG;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qBAAqB,UAAU,IAAI,qBAAqB,GAAG;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;;;;;;;;;;;;;AC7Ea;AACb;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,gBAAgB,mBAAO,CAAC,4CAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kBAAkB,eAAe,QAAQ,4DAA4D,KAAK;AACxI;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB,eAAe,QAAQ,4DAA4D,KAAK;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjDa;AACb,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,oBAAO;AAC7B,cAAc,mBAAO,CAAC,2BAAO;AAC7B,qBAAqB,mBAAO,CAAC,mDAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZa;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,4CAAgB;AACzwC;;;;;;;;;;;ACAA,kC;;;;;;;;;;;ACAA,oC;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,sC","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../src/utils/utils\");\nconst express = require(\"express\");\nconst logger = require(\"morgan\");\nconst bodyParser = require(\"body-parser\");\nconst http = require(\"http\");\nclass App {\n    constructor() {\n        this.express = express();\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.middleware();\n            this.setNormalizePort();\n        });\n    }\n    middleware() {\n        this.express.use(logger('dev'));\n        this.express.use(bodyParser.json({ limit: '10mb' }));\n        this.express.use(bodyParser.urlencoded({ extended: false, limit: '10mb', parameterLimit: 1000000 }));\n        // CORS 문제.\n        this.express.use('/', (req, res, next) => {\n            res.header(\"Access-Control-Allow-Origin\", \"*\");\n            res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n            next();\n        });\n    }\n    setNormalizePort() {\n        this.port = utils_1.normalizePort(3020);\n    }\n    createServer() {\n        this.express.set('port', this.port);\n        this.server = http.createServer(this.express);\n        this.server.listen(this.port);\n    }\n}\nexports.default = App;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass CollisionEngine {\n    static applyTilePhysics(objA, collisionResult) {\n        const dt = collisionResult.time;\n        const objB = collisionResult.object;\n        // xAxis\n        if (collisionResult.direction.left || collisionResult.direction.right) {\n            const vectorA = objA.vector.x + objB.weight * (objB.vector.x - objA.vector.x) / (objA.weight + objB.weight) * 2;\n            objA.position.x += objA.vector.x * dt + (collisionResult.direction.left ? 0.15 : -0.15);\n            objA.vector.x = CollisionEngine.translateTinyValue(vectorA) * 0;\n        }\n        // yAxis\n        if (collisionResult.direction.up || collisionResult.direction.down) {\n            const vectorA = objA.vector.y + objB.weight * (objB.vector.y - objA.vector.y) / (objA.weight + objB.weight) * 2;\n            objA.position.y += objA.vector.y * dt + (collisionResult.direction.up ? 0.15 : -0.15);\n            objA.vector.y = CollisionEngine.translateTinyValue(vectorA) * 0;\n            objA.land = true;\n        }\n        return {\n            objA: objA,\n            objB: objB\n        };\n    }\n    static applyPhysics(objA, collisionResult) {\n        const dt = collisionResult.time;\n        const objB = collisionResult.object;\n        // xAxis\n        if (collisionResult.direction.left || collisionResult.direction.right) {\n            const vectorA = objA.vector.x + objB.weight * (objB.vector.x - objA.vector.x) / (objA.weight + objB.weight) * 2;\n            const vectorB = objB.vector.x + objA.weight * (objA.vector.x - objB.vector.x) / (objA.weight + objB.weight) * 2;\n            objA.position.x += objA.vector.x * dt;\n            objB.position.x += objB.vector.x * dt;\n            objA.vector.x = CollisionEngine.translateTinyValue(vectorA);\n            objB.vector.x = CollisionEngine.translateTinyValue(vectorB);\n        }\n        // yAxis\n        if (collisionResult.direction.up || collisionResult.direction.down) {\n            const vectorA = objA.vector.y + objB.weight * (objB.vector.y - objA.vector.y) / (objA.weight + objB.weight) * 2;\n            const vectorB = objB.vector.y + objA.weight * (objA.vector.y - objB.vector.y) / (objA.weight + objB.weight) * 2;\n            objA.position.y += objA.vector.y * dt;\n            objB.position.y += objB.vector.y * dt;\n            objA.vector.y = CollisionEngine.translateTinyValue(vectorA);\n            objB.vector.y = CollisionEngine.translateTinyValue(vectorB);\n        }\n        return {\n            objA: objA,\n            objB: objB\n        };\n    }\n    static getHitObjects(objA, objects, dt) {\n        let result = [];\n        let time = Infinity;\n        const tickInterpolation = 24;\n        objects.forEach((objB) => {\n            const hitTestResult = CollisionEngine.hitTest(objA, objB);\n            if (hitTestResult.time <= dt && hitTestResult.time >= -tickInterpolation && time > hitTestResult.time) {\n                result = [hitTestResult];\n                time = hitTestResult.time;\n            }\n            else if (hitTestResult.time <= dt && hitTestResult.time >= -tickInterpolation && time === hitTestResult.time) {\n                result.push(hitTestResult);\n                time = hitTestResult.time;\n            }\n        });\n        return result;\n    }\n    static hitTest(objA, objB) {\n        const xAxis = CollisionEngine.xAxisHitTest(objA, objB);\n        const yAxis = CollisionEngine.yAxisHitTest(objA, objB);\n        const result = { direction: { left: false, right: false, up: false, down: false }, time: Infinity, object: null };\n        // Collision\n        if (xAxis.min < yAxis.max && xAxis.max > yAxis.min) {\n            result.time = xAxis.min < yAxis.min ? yAxis.min : xAxis.min;\n            result.direction.left = (xAxis.min === result.time) && (objB.vector.x - objA.vector.x > 0);\n            result.direction.right = (xAxis.min === result.time) && (objB.vector.x - objA.vector.x < 0);\n            result.direction.up = (yAxis.min === result.time) && (objB.vector.y - objA.vector.y > 0);\n            result.direction.down = (yAxis.min === result.time) && (objB.vector.y - objA.vector.y < 0);\n            result.object = objB;\n        }\n        return result;\n    }\n    static yAxisHitTest(objA, objB) {\n        const vector = objB.vector.y - objA.vector.y;\n        let timestamp = { min: Infinity, max: -Infinity };\n        if (vector === 0) {\n            if (objA.position.y + objA.size.y >= objB.position.y && objA.position.y <= objB.position.y + objB.size.y) {\n                timestamp = { min: -Infinity, max: Infinity };\n            }\n        }\n        else if (vector > 0) {\n            timestamp.max = ((objA.position.y + objA.size.y) - objB.position.y) / vector;\n            timestamp.min = (objA.position.y - (objB.position.y + objB.size.y)) / vector;\n        }\n        else if (vector < 0) {\n            timestamp.max = (objA.position.y - (objB.position.y + objB.size.y)) / vector;\n            timestamp.min = ((objA.position.y + objA.size.y) - objB.position.y) / vector;\n        }\n        return timestamp;\n    }\n    static xAxisHitTest(objA, objB) {\n        const vector = objB.vector.x - objA.vector.x;\n        let timestamp = { min: Infinity, max: -Infinity };\n        if (vector === 0) {\n            if (objA.position.x + objA.size.x >= objB.position.x && objA.position.x <= objB.position.x + objB.size.x) {\n                timestamp = { min: -Infinity, max: Infinity };\n            }\n        }\n        else if (vector > 0) {\n            timestamp.max = ((objA.position.x + objA.size.x) - objB.position.x) / vector;\n            timestamp.min = (objA.position.x - (objB.position.x + objB.size.x)) / vector;\n        }\n        else if (vector < 0) {\n            timestamp.max = (objA.position.x - (objB.position.x + objB.size.x)) / vector;\n            timestamp.min = ((objA.position.x + objA.size.x) - objB.position.x) / vector;\n        }\n        return timestamp;\n    }\n    static translateTinyValue(value) {\n        return Math.abs(value) <= 0.00000000001 ? 0 : value;\n    }\n}\nexports.default = CollisionEngine;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst define_1 = require(\"../define\");\nconst utils_1 = require(\"../../utils/utils\");\n/*\n    플레이어는 초당 30발의 armo를 생성 => 10명제한 => 300개의 Object\n    타일은 총 600 * 150 => 900,000개의 Tile Object\n    HitTest Object => 해당 오브젝트의 크기 * Vector 범위검사.\n*/\n// Map Generating 다시 볼 것.\nclass MapGenerator {\n    // 600 * 150의 맵을 목표 => 9600px * 2400px => 9600px * 4000px 의 맵..\n    // 60 * 15 => 960px * 240px => 960px * 1840px 의 맵.. => 화면에 보이는 크기만큼만 렌더링 할 수 있도록 해야할 것.\n    // 하늘의 크기는 Default 100 tile 로 하자. (1600px)\n    generate(width, height) {\n        let map = {};\n        const defaultSkyHeight = 17;\n        for (let y = defaultSkyHeight; y < height + defaultSkyHeight; y++) {\n            for (let x = 0; x < width; x++) {\n                if (!MapGenerator.isDeletedTile(x, y, defaultSkyHeight + 2)) {\n                    if (Math.random() <= 0.9 - 1.1 * (y / (20 + defaultSkyHeight)) || (map[x + (y - 1) * width] !== undefined && map[x - 1 + y * width] !== undefined)) {\n                        const positionToIndex = x + y * width;\n                        map[positionToIndex] = this.newTile(x, y);\n                    }\n                    if (x > 0) {\n                        if (Math.random() <= 0.9 - 1.1 * (y / (20 + defaultSkyHeight)) || (map[(width - x - 1) + (y - 1) * width] !== undefined && map[(width - x) + y * width] !== undefined)) {\n                            const positionToIndex = (width - x - 1) + y * width;\n                            map[positionToIndex] = this.newTile((width - x - 1), y);\n                        }\n                    }\n                }\n            }\n        }\n        for (let y = height + defaultSkyHeight - 2; y < height + defaultSkyHeight; y++) {\n            for (let x = 0; x < width; x++) {\n                const positionToIndex = x + y * width;\n                map[positionToIndex] = this.newTile(x, y);\n            }\n        }\n        for (let key in map) {\n            utils_1.changeTileNumber(map, key, width);\n            if (map[key].tileNumber === 15) {\n                delete map[key];\n            }\n        }\n        return {\n            map: map,\n            worldProperties: {\n                width: width,\n                height: height + defaultSkyHeight\n            }\n        };\n    }\n    static isDeletedTile(x, y, baseY) {\n        const HEIGHT = 3;\n        const CYCLE = 60;\n        const Y = Math.sin(Math.PI * 2 / CYCLE * (x + CYCLE / 4 * 3)) * HEIGHT / 2;\n        return (y - baseY) < Y;\n    }\n    // TODO 변경\n    newTile(x, y) {\n        const tileProperties = {\n            class: 'dirt',\n            objectType: 'tiles',\n            size: { x: define_1.TILE_SIZE.WIDTH, y: define_1.TILE_SIZE.HEIGHT },\n            scale: { x: 1.5, y: 1.5 },\n            health: 100,\n            maxHealth: 100,\n            weight: 10000000000000000000,\n            movableRate: 0,\n            tileNumber: 0,\n            position: { x: x * (define_1.TILE_SIZE.WIDTH), y: y * (define_1.TILE_SIZE.HEIGHT) },\n            vector: { x: 0, y: 0 },\n            forceVector: { x: 0, y: 0 },\n            flip: { x: false, y: false },\n            rotation: 0,\n            rotationVector: 0\n        };\n        return tileProperties;\n    }\n}\nexports.default = MapGenerator;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TILE_SIZE = {\n    WIDTH: 24,\n    HEIGHT: 24\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass GameData {\n    constructor() {\n        this.worldProperties = {\n            width: 0,\n            height: 0\n        };\n        this.data = {\n            tiles: {},\n            objects: {},\n            characters: {}\n        };\n        this.beGenerates = {\n            tiles: [],\n            objects: [],\n            characters: []\n        };\n        this.beDeletes = {\n            tiles: [],\n            objects: [],\n            characters: []\n        };\n        this.dirties = {\n            tiles: [],\n            objects: [],\n            characters: []\n        };\n    }\n    setData(id, data) {\n        this.data[data.objectType][id] = data;\n        this.dirty(id, data.objectType);\n    }\n    deleteData(id, type) {\n        delete this.data[type][id];\n        if (this.beDeletes[type].indexOf(id) < 0) {\n            this.beDeletes[type].push(id);\n        }\n    }\n    insertData(id, data) {\n        this.data[data.objectType][id] = data;\n        if (this.beGenerates[data.objectType].indexOf(id) < 0) {\n            this.beGenerates[data.objectType].push(id);\n        }\n    }\n    initGameData(data) {\n        this.data = data;\n        for (let type in this.data) {\n            for (let id in this.data[type]) {\n                if (id && this.beGenerates[type].indexOf(id) < 0) {\n                    this.beGenerates[type].push(id);\n                }\n            }\n        }\n    }\n    doneGenerate(id, type) {\n        const index = this.beGenerates[type].indexOf(id);\n        if (index >= 0) {\n            this.beGenerates[type].splice(index, 1);\n        }\n    }\n    doneDelete(id, type) {\n        const index = this.beDeletes[type].indexOf(id);\n        if (index >= 0) {\n            this.beDeletes[type].splice(index, 1);\n        }\n    }\n    dirty(id, type) {\n        const index = this.dirties[type].indexOf(id);\n        if (index < 0) {\n            this.dirties[type].push(id);\n        }\n    }\n    clean(id, type) {\n        const index = this.dirties[type].indexOf(id);\n        if (index >= 0) {\n            this.dirties[type].splice(index, 1);\n        }\n    }\n}\nexports.default = GameData;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mapGenerator_1 = require(\"./class/mapGenerator\");\nconst collisionEngine_1 = require(\"./class/collisionEngine\");\nconst define_1 = require(\"./define\");\nclass GameLogic {\n    makeWorldMap(width, height) {\n        const mapGenerator = new mapGenerator_1.default();\n        const worldMap = mapGenerator.generate(width, height);\n        for (let key in worldMap.map) {\n            this.gameData.insertData(key, worldMap.map[key]);\n        }\n        this.gameData.worldProperties = worldMap.worldProperties;\n    }\n    /* ----------------------- Logic ----------------------- */\n    update(dt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.collision(dt);\n            this.applyVector(dt);\n            this.applyForceVector(dt);\n        });\n    }\n    collision(dt) {\n        this.characterCollision(dt);\n    }\n    characterCollision(dt) {\n        for (let id in this.gameData.data['characters']) {\n            const character = this.gameData.data['characters'][id];\n            this.characterTileCollision(character, dt);\n        }\n    }\n    characterTileCollision(character, dt) {\n        const tiles = this.getTiles(character);\n        const result = collisionEngine_1.default.getHitObjects(character, tiles, dt);\n        if (result.length > 0) {\n            result.forEach((collisionData) => {\n                collisionEngine_1.default.applyTilePhysics(character, collisionData);\n            });\n        }\n        else {\n            character.forceVector.y = character.forceVector.y === 0 ? 0.0002 : character.forceVector.y;\n        }\n    }\n    getTiles(character) {\n        const result = [];\n        const pos = { x: Math.round(character.position.x / define_1.TILE_SIZE.WIDTH) - 2, y: Math.round(character.position.y / define_1.TILE_SIZE.HEIGHT) - 2 };\n        const size = { x: Math.round(character.size.x / define_1.TILE_SIZE.WIDTH + 0.5) + 4, y: Math.round(character.size.y / define_1.TILE_SIZE.HEIGHT + 0.5) + 4 };\n        for (let i = pos.x; i < pos.x + size.x; i++) {\n            for (let j = pos.y; j < pos.y + size.y; j++) {\n                if (this.gameData.data['tiles'][i + j * this.gameData.worldProperties.width]) {\n                    result.push(this.gameData.data['tiles'][i + j * this.gameData.worldProperties.width]);\n                }\n            }\n        }\n        return result;\n    }\n    applyForceVector(dt) {\n        for (let type in this.gameData.data) {\n            for (let id in this.gameData.data[type]) {\n                if (this.gameData.data[type][id].forceVector.x !== 0 || this.gameData.data[type][id].forceVector.y !== 0) {\n                    this.gameData.data[type][id].vector.x += dt * this.gameData.data[type][id].forceVector.x / this.gameData.data[type][id].weight;\n                    this.gameData.data[type][id].vector.y += dt * this.gameData.data[type][id].forceVector.y / this.gameData.data[type][id].weight;\n                    this.gameData.dirty(id, type);\n                }\n            }\n        }\n    }\n    applyVector(dt) {\n        for (let type in this.gameData.data) {\n            for (let id in this.gameData.data[type]) {\n                if (this.gameData.data[type][id].vector.x !== 0 || this.gameData.data[type][id].vector.y !== 0) {\n                    this.gameData.data[type][id].position.x += dt * this.gameData.data[type][id].vector.x;\n                    this.gameData.data[type][id].position.y += dt * this.gameData.data[type][id].vector.y;\n                    this.gameData.dirty(id, type);\n                }\n            }\n        }\n    }\n    setWorldProperties(worldProperties) {\n        this.gameData.worldProperties = worldProperties;\n    }\n    /* ----------------------- Command ----------------------- */\n    addCharacter(data, dt) {\n        data.position.x += dt * data.vector.x;\n        data.position.y += dt * data.vector.y;\n        data.position.x += dt * dt * data.forceVector.x / 2;\n        data.position.y += dt * dt * data.forceVector.y / 2;\n        data.vector.x += dt * data.forceVector.x;\n        data.vector.y += dt * data.forceVector.y;\n        this.gameData.insertData(data.id, data);\n    }\n    deleteCharacter(data, dt) {\n        this.gameData.deleteData(data.id, data.objectType);\n    }\n    setVector(data, dt) {\n        data.position.x += dt * data.vector.x;\n        data.position.y += dt * data.vector.y;\n        this.gameData.data[data.objectType][data.id].position = data.position;\n        this.gameData.data[data.objectType][data.id].vector = data.vector;\n        this.gameData.dirty(data.id, data.objectType);\n    }\n    // setVector, addCharacter랑 통합해서 setState로 만들 수 있을 것 같다..\n    setForceVector(data, dt) {\n        data.position.x += dt * dt * data.forceVector.x / 2;\n        data.position.y += dt * dt * data.forceVector.y / 2;\n        data.vector.x += dt * data.forceVector.x;\n        data.vector.y += dt * data.forceVector.y;\n        this.gameData.data[data.objectType][data.id].position = data.position;\n        this.gameData.data[data.objectType][data.id].vector = data.vector;\n        this.gameData.data[data.objectType][data.id].forceVector = data.forceVector;\n        this.gameData.dirty(data.id, data.objectType);\n    }\n    runCommand(command, date) {\n        if (typeof (this[command.script]) === 'function') {\n            const dt = Date.now() - date;\n            this[command.script](command.data, dt);\n        }\n    }\n}\nexports.default = GameLogic;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../utils/utils\");\nconst socketIO = require(\"socket.io\");\nconst roomManager_1 = require(\"./roomManager\");\nclass GameServer {\n    constructor() {\n        this.roomManager = new roomManager_1.RoomManager();\n    }\n    // TODO 여기 하단 한번 정리하자.\n    createSocketServer(server) {\n        try {\n            this.io = socketIO(server, { serveClient: false });\n            this.io.on('connection', (socket) => { this.connection(socket); });\n        }\n        catch (error) {\n            utils_1.warn({ text: `Error: ${error}` });\n        }\n    }\n    connection(socket) {\n        const room = this.roomManager.autoMapping(socket);\n        room.setNamespace(this.io.in(room.name));\n        utils_1.log({ text: `Connection: ${socket.id}` });\n        socket.on('init', () => { this.socketInit(socket, room); });\n        socket.on('broadcast', (message, date) => { this.broadcast(socket, room, message, date); });\n        socket.on('keydown', (keycode) => { this.keydown(socket, room, keycode); });\n        socket.on('keyup', (keycode) => { this.keyup(socket, room, keycode); });\n        socket.on('disconnect', () => { this.disconnect(socket, room); });\n    }\n    disconnect(socket, room) {\n        const command = {\n            script: 'deleteCharacter',\n            data: {\n                id: socket.id,\n                objectType: 'characters'\n            }\n        };\n        this.io.in(room.name).emit('broadcast', JSON.stringify(command), Date.now());\n        room.gameLogic.runCommand(command, Date.now());\n        utils_1.warn({ text: `Disconnect: ${socket.id}` });\n        this.roomManager.disconnect(socket);\n    }\n    socketInit(socket, room) {\n        socket.emit('initGameData', JSON.stringify(room.gameData.data));\n        // TODO 제거.\n        const command3 = {\n            script: 'setWorldProperties',\n            data: room.gameData.worldProperties\n        };\n        this.io.in(room.name).emit('broadcast', JSON.stringify(command3), Date.now());\n        const command = {\n            script: 'addCharacter',\n            data: {\n                id: socket.id,\n                class: 'archer',\n                objectType: 'characters',\n                size: { x: 28, y: 76 },\n                scale: { x: 1, y: 1 },\n                health: 100,\n                maxHealth: 100,\n                weight: 1,\n                movableRate: 0,\n                land: false,\n                position: { x: (room.members.length - 1) * 16, y: 0 },\n                vector: { x: 0, y: 0 },\n                forceVector: { x: 0, y: 0.0005 },\n                flip: { x: false, y: false },\n                rotation: 0,\n                rotationVector: 0\n            }\n        };\n        this.io.in(room.name).emit('broadcast', JSON.stringify(command), Date.now());\n        room.gameLogic.runCommand(command, Date.now());\n    }\n    broadcast(socket, room, message, date) {\n        this.io.in(room.name).emit('broadcast', message, date);\n        const command = JSON.parse(message);\n        room.gameLogic.runCommand(command, date);\n    }\n    keydown(socket, room, keycode) {\n        // console.log(`keyDown: ${keycode} / id: ${socket.id}`);\n        if (keycode === 38) {\n            if (room.gameData.data.characters[socket.id].land) {\n                const command2 = {\n                    script: 'setForceVector',\n                    data: {\n                        id: socket.id,\n                        objectType: 'characters',\n                        position: room.gameData.data.characters[socket.id].position,\n                        vector: { x: room.gameData.data.characters[socket.id].vector.x, y: -0.15 },\n                        forceVector: { x: room.gameData.data.characters[socket.id].forceVector.x, y: 0.0002 }\n                    }\n                };\n                room.gameData.data.characters[socket.id].land = false;\n                this.io.in(room.name).emit('broadcast', JSON.stringify(command2), Date.now());\n                room.gameLogic.runCommand(command2, Date.now());\n            }\n        }\n        else if (keycode === 39) {\n            const command2 = {\n                script: 'setVector',\n                data: {\n                    id: socket.id,\n                    objectType: 'characters',\n                    position: room.gameData.data.characters[socket.id].position,\n                    vector: { x: 0.15, y: room.gameData.data.characters[socket.id].vector.y }\n                }\n            };\n            this.io.in(room.name).emit('broadcast', JSON.stringify(command2), Date.now());\n            room.gameLogic.runCommand(command2, Date.now());\n        }\n        else if (keycode === 37) {\n            const command2 = {\n                script: 'setVector',\n                data: {\n                    id: socket.id,\n                    objectType: 'characters',\n                    position: room.gameData.data.characters[socket.id].position,\n                    vector: { x: -0.15, y: room.gameData.data.characters[socket.id].vector.y }\n                }\n            };\n            this.io.in(room.name).emit('broadcast', JSON.stringify(command2), Date.now());\n            room.gameLogic.runCommand(command2, Date.now());\n        }\n    }\n    keyup(socket, room, keycode) {\n        // console.log(`keyup: ${keycode} / id: ${socket.id}`);\n        if (keycode === 39 && room.gameData.data.characters[socket.id].vector.x > 0) {\n            const command2 = {\n                script: 'setVector',\n                data: {\n                    id: socket.id,\n                    objectType: 'characters',\n                    position: room.gameData.data.characters[socket.id].position,\n                    vector: { x: 0, y: room.gameData.data.characters[socket.id].vector.y }\n                }\n            };\n            this.io.in(room.name).emit('broadcast', JSON.stringify(command2), Date.now());\n            room.gameLogic.runCommand(command2, Date.now());\n        }\n        else if (keycode === 37 && room.gameData.data.characters[socket.id].vector.x < 0) {\n            const command2 = {\n                script: 'setVector',\n                data: {\n                    id: socket.id,\n                    objectType: 'characters',\n                    position: room.gameData.data.characters[socket.id].position,\n                    vector: { x: 0, y: room.gameData.data.characters[socket.id].vector.y }\n                }\n            };\n            this.io.in(room.name).emit('broadcast', JSON.stringify(command2), Date.now());\n            room.gameLogic.runCommand(command2, Date.now());\n        }\n    }\n}\nexports.default = GameServer;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gameLogic_1 = require(\"./gameLogic\");\nconst updater_1 = require(\"./updater\");\nconst gameData_1 = require(\"./gameData\");\nconst utils_1 = require(\"../utils/utils\");\nclass Room {\n    constructor(options) {\n        this.members = [];\n        let defaultOptions = Object.assign({\n            name: '',\n            members: [],\n            isPlaying: false,\n            maxMembers: 10\n        }, options);\n        for (let key in defaultOptions) {\n            this[key] = defaultOptions[key];\n        }\n        this.gameLogic = new gameLogic_1.default();\n        this.updater = new updater_1.default();\n        this.gameData = new gameData_1.default();\n        this.gameLogic.gameData = this.gameData;\n        // 임시로 추가. TODO: 제거할 것.\n        utils_1.log({ text: `Make World...` });\n        this.gameLogic.makeWorldMap(200, 24);\n        utils_1.log({ text: `Done...` });\n        this.updater.onUpdate((dt) => __awaiter(this, void 0, void 0, function* () {\n            yield this.gameLogic.update(dt);\n        }));\n    }\n    get joinable() {\n        return this.members.length < this.maxMembers && !this.isPlaying;\n    }\n    join(id) {\n        this.members.push(id);\n    }\n    leave(id) {\n        const index = this.members.indexOf(id);\n        if (index >= 0) {\n            this.members.splice(index, 1);\n        }\n    }\n    destroy() {\n        this.updater.stop();\n    }\n    setNamespace(io) {\n        this.io = this.gameLogic.io = io;\n    }\n}\nexports.Room = Room;\n;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst room_1 = require(\"./room\");\nconst utils_1 = require(\"../utils/utils\");\nclass RoomManager {\n    constructor() {\n        this.userDict = {};\n        this.rooms = [];\n        this.count = 0;\n    }\n    autoMapping(socket) {\n        let room;\n        for (let key in this.rooms) {\n            if (this.rooms[key].joinable) {\n                room = this.rooms[key];\n                break;\n            }\n        }\n        if (!room) {\n            room = this.makeRoom({ name: this.getRoomName() });\n        }\n        this.joinRoom(socket, room.name);\n        return room;\n    }\n    makeRoom(options) {\n        const newRoom = new room_1.Room(options);\n        this.rooms.push(newRoom);\n        utils_1.log({ text: `MakeRoom: ${newRoom.name}` });\n        return newRoom;\n    }\n    deleteRoom(room) {\n        const index = this.rooms.indexOf(room);\n        if (index >= 0) {\n            utils_1.warn({ text: `DeleteRoom: ${this.rooms[index].name}` });\n            this.rooms.splice(index, 1);\n            room.destroy();\n        }\n    }\n    joinRoom(socket, roomName) {\n        let result = false;\n        for (let key in this.rooms) {\n            if (this.rooms[key].name === roomName && this.rooms[key].joinable) {\n                utils_1.log({ text: `JoinRoom: ${socket.id}, ${this.rooms[key].name}` });\n                result = true;\n                socket.join(this.rooms[key].name);\n                this.rooms[key].join(socket.id);\n                this.userDict[socket.id] = roomName;\n                break;\n            }\n        }\n        return result;\n    }\n    leaveRoom(socket, roomName) {\n        let result = false;\n        for (let key in this.rooms) {\n            if (this.rooms[key].name === roomName) {\n                utils_1.warn({ text: `LeaveRoom: ${socket.id}, ${this.rooms[key].name}` });\n                result = true;\n                socket.leave(this.rooms[key].name);\n                this.rooms[key].leave(socket.id);\n                delete this.userDict[socket.id];\n                if (this.rooms[key].members.length <= 0) {\n                    this.deleteRoom(this.rooms[key]);\n                }\n                break;\n            }\n        }\n        return result;\n    }\n    disconnect(socket) {\n        this.leaveRoom(socket, this.userDict[socket.id]);\n    }\n    getRoomName() {\n        this.count++;\n        return `Room${this.count}`;\n    }\n}\nexports.RoomManager = RoomManager;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../utils/utils\");\nclass Updater {\n    constructor() {\n        this.time = 0;\n        this.updateCount = 0;\n        this.GAME_UPDATE_MILLISEC = 8;\n        this.AVERAGE_LOOPING = 30;\n    }\n    onUpdate(callback) {\n        let lastTime = Date.now();\n        this.updaterID = setInterval(() => __awaiter(this, void 0, void 0, function* () {\n            const dt = Date.now() - lastTime;\n            this.performanceCheck(dt);\n            yield callback(dt);\n            lastTime += dt;\n        }), this.GAME_UPDATE_MILLISEC);\n    }\n    performanceCheck(dt) {\n        this.time += dt;\n        this.updateCount++;\n        // 125번 Update가 Maximum 성능이 20% 이상 다운되었을 경우 Warning Log띄우기.\n        if (this.time >= 1000 * this.AVERAGE_LOOPING) {\n            const ups = this.updateCount / this.AVERAGE_LOOPING;\n            if (this.updateCount < 1000 / this.GAME_UPDATE_MILLISEC * this.AVERAGE_LOOPING * 0.8) {\n                utils_1.warn({ text: `update: ${ups.toFixed(2)} ups (${(ups / (1000 / this.GAME_UPDATE_MILLISEC) * 100).toFixed(2)}%)` });\n                if (this.updateCount < 1000 / this.GAME_UPDATE_MILLISEC * this.AVERAGE_LOOPING * 0.2) {\n                    this.forceDisConnect ? this.forceDisConnect() : null;\n                }\n            }\n            else {\n                utils_1.system({ text: `update: ${ups.toFixed(2)} ups (${(ups / (1000 / this.GAME_UPDATE_MILLISEC) * 100).toFixed(2)}%)` });\n            }\n            this.time = this.updateCount = 0;\n        }\n    }\n    stop() {\n        clearInterval(this.updaterID);\n    }\n}\nexports.default = Updater;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debug = require(\"debug\");\nconst App_1 = require(\"./App\");\nconst gameServer_1 = require(\"./game/gameServer\");\ndebug('ts-express:server');\n// express 서버.\nconst app = new App_1.default();\napp.init();\napp.createServer();\n// 게임의 진행을 담당하는 소켓서버이다.\nconst gameServer = new gameServer_1.default();\ngameServer.createSocketServer(app.server);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst define_1 = require(\"../game/define\");\n/*\nReset = \"\\x1b[0m\"\nBright = \"\\x1b[1m\"\nDim = \"\\x1b[2m\"\nUnderscore = \"\\x1b[4m\"\nBlink = \"\\x1b[5m\"\nReverse = \"\\x1b[7m\"\nHidden = \"\\x1b[8m\"\n\nFgBlack = \"\\x1b[30m\"\nFgRed = \"\\x1b[31m\"\nFgGreen = \"\\x1b[32m\"\nFgYellow = \"\\x1b[33m\"\nFgBlue = \"\\x1b[34m\"\nFgMagenta = \"\\x1b[35m\"\nFgCyan = \"\\x1b[36m\"\nFgWhite = \"\\x1b[37m\"\n\nBgBlack = \"\\x1b[40m\"\nBgRed = \"\\x1b[41m\"\nBgGreen = \"\\x1b[42m\"\nBgYellow = \"\\x1b[43m\"\nBgBlue = \"\\x1b[44m\"\nBgMagenta = \"\\x1b[45m\"\nBgCyan = \"\\x1b[46m\"\nBgWhite = \"\\x1b[47m\"\n*/\nfunction gameLog(data) {\n    if (data.ping) {\n        if (data.ping > 100) {\n            console.log('[\\x1b[33m%s\\x1b[0m] %s \\x1b[31m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n        else if (data.ping > 50) {\n            console.log('[\\x1b[33m%s\\x1b[0m] %s \\x1b[37m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n        else {\n            console.log('[\\x1b[33m%s\\x1b[0m] %s \\x1b[32m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n    }\n    else {\n        console.log('[\\x1b[33m%s\\x1b[0m] %s', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text);\n    }\n}\nexports.gameLog = gameLog;\nfunction log(data) {\n    if (data.ping) {\n        if (data.ping > 100) {\n            console.log('[\\x1b[36m%s\\x1b[0m] %s \\x1b[31m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n        else if (data.ping > 50) {\n            console.log('[\\x1b[36m%s\\x1b[0m] %s \\x1b[37m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n        else {\n            console.log('[\\x1b[36m%s\\x1b[0m] %s \\x1b[32m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n    }\n    else {\n        console.log('[\\x1b[36m%s\\x1b[0m] %s', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text);\n    }\n}\nexports.log = log;\nfunction warn(data) {\n    if (data.ping) {\n        if (data.ping > 100) {\n            console.log('[\\x1b[31m%s\\x1b[0m] %s \\x1b[31m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n        else if (data.ping > 50) {\n            console.log('[\\x1b[31m%s\\x1b[0m] %s \\x1b[37m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n        else {\n            console.log('[\\x1b[31m%s\\x1b[0m] %s \\x1b[32m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n    }\n    else {\n        console.log('[\\x1b[31m%s\\x1b[0m] %s', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text);\n    }\n}\nexports.warn = warn;\nfunction system(data) {\n    if (data.ping) {\n        if (data.ping > 100) {\n            console.log('[\\x1b[32m%s\\x1b[0m] %s \\x1b[31m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n        else if (data.ping > 50) {\n            console.log('[\\x1b[32m%s\\x1b[0m] %s \\x1b[37m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n        else {\n            console.log('[\\x1b[32m%s\\x1b[0m] %s \\x1b[32m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\n        }\n    }\n    else {\n        console.log('[\\x1b[32m%s\\x1b[0m] %s', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text);\n    }\n}\nexports.system = system;\nfunction normalizePort(val) {\n    const normalizedPort = (typeof val === 'string') ? parseInt(val, 10) : val;\n    if (isNaN(normalizedPort)) {\n        return val;\n    }\n    else if (normalizedPort >= 0) {\n        return normalizedPort;\n    }\n    else {\n        return false;\n    }\n}\nexports.normalizePort = normalizePort;\nfunction format(date, format) {\n    const weekName = [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"];\n    let h;\n    return format.replace(/(yyyy|yy|MM|dd|E|hh|mm|ss|a\\/p)/gi, function ($1) {\n        switch ($1) {\n            case \"yyyy\": return date.getFullYear();\n            case \"yy\": return (date.getFullYear() % 1000).toString().slice(0, 2);\n            case \"MM\": return (date.getMonth() + 1).toString().slice(0, 2);\n            case \"dd\": return date.getDate().toString().slice(0, 2);\n            case \"E\": return weekName[date.getDay()];\n            case \"HH\": return (date.getHours() < 10 ? '0' + date.getHours() : date.getHours().toString()).slice(0, 2);\n            case \"hh\": return ((h = date.getHours() % 12) ? h : 12).toString().slice(0, 2);\n            case \"mm\": return (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes().toString()).slice(0, 2);\n            case \"ss\": return (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds().toString()).slice(0, 2);\n            case \"a/p\": return date.getHours() < 12 ? \"오전\" : \"오후\";\n            default: return $1;\n        }\n    });\n}\n;\nfunction changeTileNumber(map, key, width) {\n    const x = map[key].position.x / define_1.TILE_SIZE.WIDTH;\n    const y = map[key].position.y / define_1.TILE_SIZE.HEIGHT;\n    if ((map[(x - 1) + y * width] && x > 0) && (map[(x + 1) + y * width] && x < width - 1)) {\n        map[key].tileNumber = 1;\n    }\n    else if (map[(x - 1) + y * width] && x > 0) {\n        map[key].tileNumber = 2;\n    }\n    else if (map[(x + 1) + y * width] && x < width - 1) {\n        map[key].tileNumber = 0;\n    }\n    else {\n        map[key].tileNumber = 3;\n    }\n    if (map[x + (y - 1) * width] && map[x + (y + 1) * width]) {\n        map[key].tileNumber += 4;\n    }\n    else if (map[x + (y - 1) * width]) {\n        map[key].tileNumber += 8;\n    }\n    else if (map[x + (y + 1) * width]) {\n        map[key].tileNumber += 0;\n    }\n    else {\n        map[key].tileNumber += 12;\n    }\n}\nexports.changeTileNumber = changeTileNumber;\n","module.exports = require(\"body-parser\");","module.exports = require(\"debug\");","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"morgan\");","module.exports = require(\"socket.io\");"],"sourceRoot":""}