{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.ts","webpack:///./src/game/class/mapGenerator.ts","webpack:///./src/game/define.ts","webpack:///./src/game/gameData.ts","webpack:///./src/game/gameLogic.ts","webpack:///./src/game/gameServer.ts","webpack:///./src/game/room.ts","webpack:///./src/game/roomManager.ts","webpack:///./src/game/updater.ts","webpack:///./src/index.ts","webpack:///./src/utils/utils.ts","webpack:///external \"body-parser\"","webpack:///external \"debug\"","webpack:///external \"express\"","webpack:///external \"http\"","webpack:///external \"morgan\"","webpack:///external \"socket.io\""],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFa;AACb;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,gBAAgB,mBAAO,CAAC,gDAAoB;AAC5C,gBAAgB,mBAAO,CAAC,wBAAS;AACjC,eAAe,mBAAO,CAAC,sBAAQ;AAC/B,mBAAmB,mBAAO,CAAC,gCAAa;AACxC,aAAa,mBAAO,CAAC,kBAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0CAA0C,gBAAgB;AAC1D,gDAAgD,0DAA0D;AAC1G;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7Ca;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,uCAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC,0CAA0C,+BAA+B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA,uBAAuB,+FAA+F;AACtH,qBAAqB,aAAa;AAClC,0BAA0B,aAAa;AACvC,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtDa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;;;;;;;;;;;;;ACLa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChFa;AACb;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,uBAAuB,mBAAO,CAAC,8DAAsB;AACrD,gBAAgB,mBAAO,CAAC,4CAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,sBAAsB;AACtB,2BAA2B,oBAAoB;AAC/C,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5Oa;AACb,8CAA8C,cAAc;AAC5D,gBAAgB,mBAAO,CAAC,4CAAgB;AACxC,iBAAiB,mBAAO,CAAC,4BAAW;AACpC,sBAAsB,mBAAO,CAAC,gDAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,qBAAqB;AAC7D,kDAAkD,yBAAyB,EAAE;AAC7E;AACA;AACA,0BAA0B,iBAAiB,MAAM,GAAG;AACpD;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB,UAAU,GAAG;AACxD,iCAAiC,+BAA+B,EAAE;AAClE,mDAAmD,6CAA6C,EAAE;AAClG,2CAA2C,qCAAqC,EAAE;AAClF,yCAAyC,mCAAmC,EAAE;AAC9E,uCAAuC,+BAA+B,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB,UAAU,GAAG;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA,2BAA2B,0CAA0C;AACrE,yBAAyB,aAAa;AACtC,8BAA8B,kBAAkB;AAChD,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ,SAAS,UAAU;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iEAAiE;AAC9F,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ,SAAS,UAAU;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtJa;AACb;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,oBAAoB,mBAAO,CAAC,4CAAa;AACzC,kBAAkB,mBAAO,CAAC,wCAAW;AACrC,mBAAmB,mBAAO,CAAC,0CAAY;AACvC,gBAAgB,mBAAO,CAAC,4CAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1Da;AACb,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,kCAAQ;AAC/B,gBAAgB,mBAAO,CAAC,4CAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB,aAAa,GAAG;AACzD;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB,uBAAuB,GAAG;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB,UAAU,IAAI,qBAAqB,GAAG;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qBAAqB,UAAU,IAAI,qBAAqB,GAAG;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;;;;;;;;;;;;;AC7Ea;AACb;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,gBAAgB,mBAAO,CAAC,4CAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kBAAkB,eAAe,QAAQ,4DAA4D,KAAK;AACxI;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB,eAAe,QAAQ,4DAA4D,KAAK;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjDa;AACb,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,oBAAO;AAC7B,cAAc,mBAAO,CAAC,2BAAO;AAC7B,qBAAqB,mBAAO,CAAC,mDAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAcwC;;;;;;;;;;;ACAA,kC;;;;;;;;;;;ACAA,oC;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,sC","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"../src/utils/utils\");\r\nconst express = require(\"express\");\r\nconst logger = require(\"morgan\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst http = require(\"http\");\r\nclass App {\r\n    constructor() {\r\n        this.express = express();\r\n    }\r\n    init() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.middleware();\r\n            this.setNormalizePort();\r\n        });\r\n    }\r\n    middleware() {\r\n        this.express.use(logger('dev'));\r\n        this.express.use(bodyParser.json({ limit: '10mb' }));\r\n        this.express.use(bodyParser.urlencoded({ extended: false, limit: '10mb', parameterLimit: 1000000 }));\r\n        // CORS 문제.\r\n        this.express.use('/', (req, res, next) => {\r\n            res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n            res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n            next();\r\n        });\r\n    }\r\n    setNormalizePort() {\r\n        this.port = utils_1.normalizePort(3020);\r\n    }\r\n    createServer() {\r\n        this.express.set('port', this.port);\r\n        this.server = http.createServer(this.express);\r\n        this.server.listen(this.port);\r\n    }\r\n}\r\nexports.default = App;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst define_1 = require(\"../define\");\r\n/*\r\n    플레이어는 초당 30발의 armo를 생성 => 10명제한 => 300개의 Object\r\n    타일은 총 600 * 150 => 900,000개의 Tile Object\r\n    HitTest Object => 해당 오브젝트의 크기 * Vector 범위검사.\r\n*/\r\nclass MapGenerator {\r\n    constructor() {\r\n    }\r\n    // 600 * 150의 맵을 목표 => 9600px * 2400px => 9600px * 4000px 의 맵..\r\n    // 60 * 15 => 960px * 240px => 960px * 1840px 의 맵.. => 화면에 보이는 크기만큼만 렌더링 할 수 있도록 해야할 것.\r\n    // 하늘의 크기는 Default 100 tile 로 하자. (1600px)\r\n    generate(width, height) {\r\n        let map = {};\r\n        const defaultSkyHeight = 25;\r\n        for (let x = 0; x < width; x++) {\r\n            for (let y = defaultSkyHeight; y < height + defaultSkyHeight; y++) {\r\n                if (Math.random() < 0.4)\r\n                    continue;\r\n                const positionToIndex = x + (y - Math.round(x / 15)) * width;\r\n                map[positionToIndex] = this.newTile(x, y);\r\n            }\r\n        }\r\n        return {\r\n            map: map,\r\n            worldProperties: {\r\n                width: width,\r\n                height: height + defaultSkyHeight\r\n            }\r\n        };\r\n    }\r\n    // TODO 변경\r\n    newTile(x, y) {\r\n        const tileProperties = {\r\n            class: 'dirt',\r\n            objectType: 'tiles',\r\n            size: { x: 16, y: 16 },\r\n            health: 100,\r\n            maxHealth: 100,\r\n            weight: 1,\r\n            movableRate: 0,\r\n            position: { x: x * (define_1.TILE_SIZE.WIDTH), y: (y - Math.round(x / 15)) * (define_1.TILE_SIZE.HEIGHT) },\r\n            vector: { x: 0, y: 0 },\r\n            forceVector: { x: 0, y: 0 },\r\n            flip: { x: false, y: false },\r\n            rotation: 0,\r\n            rotationVector: 0\r\n        };\r\n        return tileProperties;\r\n    }\r\n}\r\nexports.default = MapGenerator;\r\n// Map Generator -> Data -> TileMap Load -> Tile 하나하나 구성.\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TILE_SIZE = {\r\n    WIDTH: 16,\r\n    HEIGHT: 16\r\n};\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass GameData {\r\n    constructor() {\r\n        this.worldProperties = {\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        this.data = {\r\n            tiles: {},\r\n            objects: {},\r\n            characters: {}\r\n        };\r\n        this.beGenerates = {\r\n            tiles: [],\r\n            objects: [],\r\n            characters: []\r\n        };\r\n        this.beDeletes = {\r\n            tiles: [],\r\n            objects: [],\r\n            characters: []\r\n        };\r\n        this.dirties = {\r\n            tiles: [],\r\n            objects: [],\r\n            characters: []\r\n        };\r\n    }\r\n    setData(id, data) {\r\n        this.data[data.objectType][id] = data;\r\n        this.dirty(id, data.objectType);\r\n    }\r\n    deleteData(id, type) {\r\n        delete this.data[type][id];\r\n        if (this.beDeletes[type].indexOf(id) < 0) {\r\n            this.beDeletes[type].push(id);\r\n        }\r\n    }\r\n    insertData(id, data) {\r\n        this.data[data.objectType][id] = data;\r\n        if (this.beGenerates[data.objectType].indexOf(id) < 0) {\r\n            this.beGenerates[data.objectType].push(id);\r\n        }\r\n    }\r\n    initGameData(data) {\r\n        this.data = data;\r\n        for (let type in this.data) {\r\n            for (let id in this.data[type]) {\r\n                if (id && this.beGenerates[type].indexOf(id) < 0) {\r\n                    this.beGenerates[type].push(id);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    doneGenerate(id, type) {\r\n        const index = this.beGenerates[type].indexOf(id);\r\n        if (index >= 0) {\r\n            this.beGenerates[type].splice(index, 1);\r\n        }\r\n    }\r\n    doneDelete(id, type) {\r\n        const index = this.beDeletes[type].indexOf(id);\r\n        if (index >= 0) {\r\n            this.beDeletes[type].splice(index, 1);\r\n        }\r\n    }\r\n    dirty(id, type) {\r\n        const index = this.dirties[type].indexOf(id);\r\n        if (index < 0) {\r\n            this.dirties[type].push(id);\r\n        }\r\n    }\r\n    clean(id, type) {\r\n        const index = this.dirties[type].indexOf(id);\r\n        if (index >= 0) {\r\n            this.dirties[type].splice(index, 1);\r\n        }\r\n    }\r\n}\r\nexports.default = GameData;\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst mapGenerator_1 = require(\"./class/mapGenerator\");\r\nconst utils_1 = require(\"../utils/utils\");\r\nclass GameLogic {\r\n    makeWorldMap(width, height) {\r\n        const mapGenerator = new mapGenerator_1.default();\r\n        const worldMap = mapGenerator.generate(width, height);\r\n        for (let key in worldMap.map) {\r\n            this.gameData.insertData(key, worldMap.map[key]);\r\n        }\r\n        this.gameData.worldProperties = worldMap.worldProperties;\r\n    }\r\n    /* ----------------------- Logic ----------------------- */\r\n    update(dt) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.hitTestAll(dt);\r\n            this.applyVector(dt);\r\n            this.applyForceVector(dt);\r\n        });\r\n    }\r\n    hitTestAll(dt) {\r\n        this.characterHitTest(dt);\r\n        this.objectHitTest(dt);\r\n    }\r\n    hitTest(a, b, dt) {\r\n        const yAxisHitTime = this.yAxisHitTest(a, b, dt);\r\n        const xAxisHitTime = this.xAxisHitTest(a, b, dt);\r\n        const base = { min: 0, max: 1 };\r\n        const result = {\r\n            isHit: false,\r\n            time: 0,\r\n            hitArea: {\r\n                left: false,\r\n                right: false,\r\n                up: false,\r\n                down: false\r\n            }\r\n        };\r\n        if (utils_1.isBounded(base, xAxisHitTime) && utils_1.isBounded(base, yAxisHitTime) && utils_1.isNested(xAxisHitTime, yAxisHitTime)) {\r\n            result.isHit = true;\r\n            result.time = utils_1.max(xAxisHitTime.min, yAxisHitTime.min);\r\n            if (result.time === xAxisHitTime.min) {\r\n                if (a.position.x > b.position.x) {\r\n                    result.hitArea.left = true;\r\n                }\r\n                else if (a.position.x < b.position.x) {\r\n                    result.hitArea.right = true;\r\n                }\r\n            }\r\n            if (result.time === yAxisHitTime.min) {\r\n                if (a.position.y > b.position.y) {\r\n                    result.hitArea.up = true;\r\n                }\r\n                else if (a.position.y < b.position.y) {\r\n                    result.hitArea.down = true;\r\n                }\r\n            }\r\n            result.time *= dt;\r\n        }\r\n        return result;\r\n    }\r\n    yAxisHitTest(a, b, dt) {\r\n        const v = (a.vector.y * dt) - (b.vector.y * dt);\r\n        const result = { min: 2, max: -1 };\r\n        if (v === 0 && (a.position.y + a.size.y) - b.position.y > 0 && (b.position.y + b.size.y) - a.position.y > 0) {\r\n            result.min = 0;\r\n            result.max = 1;\r\n        }\r\n        else if (v > 0) {\r\n            result.max = (a.position.y - (b.position.y + b.size.y)) / -v;\r\n            result.min = ((a.position.y + a.size.y) - b.position.y) / -v;\r\n        }\r\n        else if (v < 0) {\r\n            result.max = (b.position.y - (a.position.y + a.size.y)) / v;\r\n            result.min = ((b.position.y - b.size.y) - a.position.y) / v;\r\n        }\r\n        result.min = result.min < 0 ? 0 : result.min;\r\n        result.max = result.max > 1 ? 1 : result.max;\r\n        return result;\r\n    }\r\n    xAxisHitTest(a, b, dt) {\r\n        const v = (a.vector.x * dt) - (b.vector.x * dt);\r\n        const result = { min: 2, max: -1 };\r\n        if (v === 0 && (a.position.x + a.size.x) - b.position.x > 0 && (b.position.x + b.size.x) - a.position.x > 0) {\r\n            result.min = 0;\r\n            result.max = 1;\r\n        }\r\n        else if (v > 0) {\r\n            result.min = (b.position.x - (a.position.x + a.size.x)) / v;\r\n            result.max = ((b.position.x + b.size.x) - a.position.x) / v;\r\n        }\r\n        else if (v < 0) {\r\n            result.min = (a.position.x - (b.position.x + b.size.x)) / -v;\r\n            result.max = ((a.position.x + a.size.x) - b.position.x) / -v;\r\n        }\r\n        result.min = result.min < 0 ? 0 : result.min;\r\n        result.max = result.max > 1 ? 1 : result.max;\r\n        return result;\r\n    }\r\n    characterHitTest(dt) {\r\n        for (let id in this.gameData.data['characters']) {\r\n            const character = this.gameData.data['characters'][id];\r\n            this.characterTileHitTest(character, dt);\r\n            this.characterObjectHitTest(character, dt);\r\n        }\r\n    }\r\n    getTiles(character) {\r\n        const result = [];\r\n        const pos = { x: Math.round(character.position.x / 16) - 1, y: Math.round(character.position.y / 16) - 1 };\r\n        const size = { x: Math.round(character.size.x / 16 + 0.5) + 2, y: Math.round(character.size.y / 16 + 0.5) + 2 };\r\n        for (let i = pos.x; i < pos.x + size.x; i++) {\r\n            for (let j = pos.y; j < pos.y + size.y; j++) {\r\n                if (this.gameData.data['tiles'][i + j * this.gameData.worldProperties.width]) {\r\n                    result.push(this.gameData.data['tiles'][i + j * this.gameData.worldProperties.width]);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    characterTileHitTest(character, dt) {\r\n        // 캐릭터의 Vector 계산해서 Tile과 HitTest한다. -> 캐릭터의 위치값을 이용해서 Vector거리의 타일을 조금 구해오면 빠르게 연산 가능할 것이다.\r\n        const tiles = this.getTiles(character);\r\n        tiles.forEach((tile) => {\r\n            const result = this.hitTest(character, tile, dt);\r\n            if (result.isHit) {\r\n                const command = {\r\n                    script: 'setVector',\r\n                    data: {\r\n                        id: character.id,\r\n                        objectType: 'characters',\r\n                        position: character.position,\r\n                        vector: character.vector\r\n                    }\r\n                };\r\n                if (result.hitArea.left && character.vector.x <= 0) {\r\n                    command.data.position.x = character.position.x + character.vector.x * result.time - character.vector.x * (dt + 4);\r\n                }\r\n                else if (result.hitArea.right && character.vector.x >= 0) {\r\n                    command.data.position.x = character.position.x + character.vector.x * result.time - character.vector.x * (dt + 4);\r\n                }\r\n                else if (result.hitArea.up && character.vector.y <= 0) {\r\n                    command.data.position.y = character.position.y + character.vector.y * result.time + 0.03 * dt;\r\n                    command.data.vector.y = 0.001;\r\n                }\r\n                else if (result.hitArea.down && character.vector.y >= 0) {\r\n                    command.data.position.y = character.position.y + character.vector.y * result.time - 0.03 * dt;\r\n                    command.data.vector.y = -0.001;\r\n                }\r\n                this.setVector(command.data, 0);\r\n            }\r\n        });\r\n    }\r\n    characterObjectHitTest(character, dt) {\r\n        // 이게 좀 복잡한데.. 캐릭터의 Vector와, Object의 Vector 둘 다 신경써야한다.. 어떻게 처리할까..?\r\n    }\r\n    objectHitTest(dt) {\r\n        for (let id in this.gameData['objects']) {\r\n            const object = this.gameData['objects'][id];\r\n            this.objectTileHitTest(object, dt);\r\n        }\r\n    }\r\n    objectTileHitTest(object, dt) {\r\n        // 총알과 타일의 hitTest\r\n    }\r\n    applyForceVector(dt) {\r\n        for (let type in this.gameData.data) {\r\n            for (let id in this.gameData.data[type]) {\r\n                if (this.gameData.data[type][id].forceVector.x !== 0 || this.gameData.data[type][id].forceVector.y !== 0) {\r\n                    this.gameData.data[type][id].vector.x += dt * this.gameData.data[type][id].forceVector.x;\r\n                    this.gameData.data[type][id].vector.y += dt * this.gameData.data[type][id].forceVector.y;\r\n                    this.gameData.dirty(id, type);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    applyVector(dt) {\r\n        for (let type in this.gameData.data) {\r\n            for (let id in this.gameData.data[type]) {\r\n                if (this.gameData.data[type][id].vector.x !== 0 || this.gameData.data[type][id].vector.y !== 0) {\r\n                    this.gameData.data[type][id].position.x += dt * this.gameData.data[type][id].vector.x;\r\n                    this.gameData.data[type][id].position.y += dt * this.gameData.data[type][id].vector.y;\r\n                    this.gameData.dirty(id, type);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setWorldProperties(worldProperties) {\r\n        this.gameData.worldProperties = worldProperties;\r\n    }\r\n    /* ----------------------- Command ----------------------- */\r\n    addCharacter(data, dt) {\r\n        data.position.x += dt * data.vector.x;\r\n        data.position.y += dt * data.vector.y;\r\n        data.position.x += dt * dt * data.forceVector.x / 2;\r\n        data.position.y += dt * dt * data.forceVector.y / 2;\r\n        data.vector.x += dt * data.forceVector.x;\r\n        data.vector.y += dt * data.forceVector.y;\r\n        this.gameData.insertData(data.id, data);\r\n    }\r\n    deleteCharacter(data, dt) {\r\n        this.gameData.deleteData(data.id, data.objectType);\r\n    }\r\n    setVector(data, dt) {\r\n        data.position.x += dt * data.vector.x;\r\n        data.position.y += dt * data.vector.y;\r\n        this.gameData.data[data.objectType][data.id].position = data.position;\r\n        this.gameData.data[data.objectType][data.id].vector = data.vector;\r\n        this.gameData.dirty(data.id, data.objectType);\r\n    }\r\n    // setVector, addCharacter랑 통합해서 setState로 만들 수 있을 것 같다..\r\n    setForceVector(data, dt) {\r\n        data.position.x += dt * dt * data.forceVector.x / 2;\r\n        data.position.y += dt * dt * data.forceVector.y / 2;\r\n        data.vector.x += dt * data.forceVector.x;\r\n        data.vector.y += dt * data.forceVector.y;\r\n        this.gameData.data[data.objectType][data.id].position = data.position;\r\n        this.gameData.data[data.objectType][data.id].vector = data.vector;\r\n        this.gameData.data[data.objectType][data.id].forceVector = data.forceVector;\r\n        this.gameData.dirty(data.id, data.objectType);\r\n    }\r\n    runCommand(command, date) {\r\n        if (typeof (this[command.script]) === 'function') {\r\n            const dt = Date.now() - date;\r\n            this[command.script](command.data, dt);\r\n        }\r\n    }\r\n}\r\nexports.default = GameLogic;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"../utils/utils\");\r\nconst socketIO = require(\"socket.io\");\r\nconst roomManager_1 = require(\"./roomManager\");\r\nclass GameServer {\r\n    constructor() {\r\n        this.roomManager = new roomManager_1.RoomManager();\r\n    }\r\n    // TODO 여기 하단 한번 정리하자.\r\n    createSocketServer(server) {\r\n        try {\r\n            this.io = socketIO(server, { serveClient: false });\r\n            this.io.on('connection', (socket) => { this.connection(socket); });\r\n        }\r\n        catch (error) {\r\n            utils_1.warn({ text: `Error: ${error}` });\r\n        }\r\n    }\r\n    connection(socket) {\r\n        const room = this.roomManager.autoMapping(socket);\r\n        room.setNamespace(this.io.in(room.name));\r\n        utils_1.log({ text: `Connection: ${socket.id}` });\r\n        socket.on('init', () => { this.socketInit(socket, room); });\r\n        socket.on('broadcast', (message, date) => { this.broadcast(socket, room, message, date); });\r\n        socket.on('keydown', (keycode) => { this.keydown(socket, room, keycode); });\r\n        socket.on('keyup', (keycode) => { this.keyup(socket, room, keycode); });\r\n        socket.on('disconnect', () => { this.disconnect(socket, room); });\r\n    }\r\n    disconnect(socket, room) {\r\n        const command = {\r\n            script: 'deleteCharacter',\r\n            data: {\r\n                id: socket.id,\r\n                objectType: 'characters'\r\n            }\r\n        };\r\n        this.io.in(room.name).emit('broadcast', JSON.stringify(command), Date.now());\r\n        room.gameLogic.runCommand(command, Date.now());\r\n        utils_1.warn({ text: `Disconnect: ${socket.id}` });\r\n        this.roomManager.disconnect(socket);\r\n    }\r\n    socketInit(socket, room) {\r\n        socket.emit('initGameData', JSON.stringify(room.gameData.data));\r\n        // TODO 제거.\r\n        const command3 = {\r\n            script: 'setWorldProperties',\r\n            data: room.gameData.worldProperties\r\n        };\r\n        this.io.in(room.name).emit('broadcast', JSON.stringify(command3), Date.now());\r\n        const command = {\r\n            script: 'addCharacter',\r\n            data: {\r\n                id: socket.id,\r\n                class: 'archer',\r\n                objectType: 'characters',\r\n                size: { x: 15, y: 15 },\r\n                health: 100,\r\n                maxHealth: 100,\r\n                weight: 1,\r\n                movableRate: 0,\r\n                position: { x: (room.members.length - 1) * 16, y: 0 },\r\n                vector: { x: 0, y: 0 },\r\n                forceVector: { x: 0, y: 0.0005 },\r\n                flip: { x: false, y: false },\r\n                rotation: 0,\r\n                rotationVector: 0\r\n            }\r\n        };\r\n        this.io.in(room.name).emit('broadcast', JSON.stringify(command), Date.now());\r\n        room.gameLogic.runCommand(command, Date.now());\r\n    }\r\n    broadcast(socket, room, message, date) {\r\n        this.io.in(room.name).emit('broadcast', JSON.stringify(message), date);\r\n        const command = JSON.parse(message);\r\n        room.gameLogic.runCommand(command, date);\r\n    }\r\n    keydown(socket, room, keycode) {\r\n        // console.log(`keyDown: ${keycode} / id: ${socket.id}`);\r\n        if (keycode === 38) {\r\n            const command2 = {\r\n                script: 'setForceVector',\r\n                data: {\r\n                    id: socket.id,\r\n                    objectType: 'characters',\r\n                    position: room.gameData.data.characters[socket.id].position,\r\n                    vector: { x: room.gameData.data.characters[socket.id].vector.x, y: -0.15 },\r\n                    forceVector: { x: room.gameData.data.characters[socket.id].forceVector.x, y: 0.0002 }\r\n                }\r\n            };\r\n            this.io.in(room.name).emit('broadcast', JSON.stringify(command2), Date.now());\r\n            room.gameLogic.runCommand(command2, Date.now());\r\n        }\r\n        else if (keycode === 39) {\r\n            const command2 = {\r\n                script: 'setVector',\r\n                data: {\r\n                    id: socket.id,\r\n                    objectType: 'characters',\r\n                    position: room.gameData.data.characters[socket.id].position,\r\n                    vector: { x: 0.1, y: room.gameData.data.characters[socket.id].vector.y }\r\n                }\r\n            };\r\n            this.io.in(room.name).emit('broadcast', JSON.stringify(command2), Date.now());\r\n            room.gameLogic.runCommand(command2, Date.now());\r\n        }\r\n        else if (keycode === 37) {\r\n            const command2 = {\r\n                script: 'setVector',\r\n                data: {\r\n                    id: socket.id,\r\n                    objectType: 'characters',\r\n                    position: room.gameData.data.characters[socket.id].position,\r\n                    vector: { x: -0.1, y: room.gameData.data.characters[socket.id].vector.y }\r\n                }\r\n            };\r\n            this.io.in(room.name).emit('broadcast', JSON.stringify(command2), Date.now());\r\n            room.gameLogic.runCommand(command2, Date.now());\r\n        }\r\n    }\r\n    keyup(socket, room, keycode) {\r\n        // console.log(`keyup: ${keycode} / id: ${socket.id}`);\r\n        if (keycode === 39 && room.gameData.data.characters[socket.id].vector.x > 0) {\r\n            const command2 = {\r\n                script: 'setVector',\r\n                data: {\r\n                    id: socket.id,\r\n                    objectType: 'characters',\r\n                    position: room.gameData.data.characters[socket.id].position,\r\n                    vector: { x: 0, y: room.gameData.data.characters[socket.id].vector.y }\r\n                }\r\n            };\r\n            this.io.in(room.name).emit('broadcast', JSON.stringify(command2), Date.now());\r\n            room.gameLogic.runCommand(command2, Date.now());\r\n        }\r\n        else if (keycode === 37 && room.gameData.data.characters[socket.id].vector.x < 0) {\r\n            const command2 = {\r\n                script: 'setVector',\r\n                data: {\r\n                    id: socket.id,\r\n                    objectType: 'characters',\r\n                    position: room.gameData.data.characters[socket.id].position,\r\n                    vector: { x: 0, y: room.gameData.data.characters[socket.id].vector.y }\r\n                }\r\n            };\r\n            this.io.in(room.name).emit('broadcast', JSON.stringify(command2), Date.now());\r\n            room.gameLogic.runCommand(command2, Date.now());\r\n        }\r\n    }\r\n}\r\nexports.default = GameServer;\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst gameLogic_1 = require(\"./gameLogic\");\r\nconst updater_1 = require(\"./updater\");\r\nconst gameData_1 = require(\"./gameData\");\r\nconst utils_1 = require(\"../utils/utils\");\r\nclass Room {\r\n    constructor(options) {\r\n        this.members = [];\r\n        let defaultOptions = Object.assign({\r\n            name: '',\r\n            members: [],\r\n            isPlaying: false,\r\n            maxMembers: 10\r\n        }, options);\r\n        for (let key in defaultOptions) {\r\n            this[key] = defaultOptions[key];\r\n        }\r\n        this.gameLogic = new gameLogic_1.default();\r\n        this.updater = new updater_1.default();\r\n        this.gameData = new gameData_1.default();\r\n        this.gameLogic.gameData = this.gameData;\r\n        // 임시로 추가. TODO: 제거할 것.\r\n        utils_1.log({ text: `Make World...` });\r\n        this.gameLogic.makeWorldMap(132, 20);\r\n        utils_1.log({ text: `Done...` });\r\n        this.updater.onUpdate((dt) => __awaiter(this, void 0, void 0, function* () {\r\n            yield this.gameLogic.update(dt);\r\n        }));\r\n    }\r\n    get joinable() {\r\n        return this.members.length < this.maxMembers && !this.isPlaying;\r\n    }\r\n    join(id) {\r\n        this.members.push(id);\r\n    }\r\n    leave(id) {\r\n        const index = this.members.indexOf(id);\r\n        if (index >= 0) {\r\n            this.members.splice(index, 1);\r\n        }\r\n    }\r\n    destroy() {\r\n        this.updater.stop();\r\n    }\r\n    setNamespace(io) {\r\n        this.io = this.gameLogic.io = io;\r\n    }\r\n}\r\nexports.Room = Room;\r\n;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst room_1 = require(\"./room\");\r\nconst utils_1 = require(\"../utils/utils\");\r\nclass RoomManager {\r\n    constructor() {\r\n        this.userDict = {};\r\n        this.rooms = [];\r\n        this.count = 0;\r\n    }\r\n    autoMapping(socket) {\r\n        let room;\r\n        for (let key in this.rooms) {\r\n            if (this.rooms[key].joinable) {\r\n                room = this.rooms[key];\r\n                break;\r\n            }\r\n        }\r\n        if (!room) {\r\n            room = this.makeRoom({ name: this.getRoomName() });\r\n        }\r\n        this.joinRoom(socket, room.name);\r\n        return room;\r\n    }\r\n    makeRoom(options) {\r\n        const newRoom = new room_1.Room(options);\r\n        this.rooms.push(newRoom);\r\n        utils_1.log({ text: `MakeRoom: ${newRoom.name}` });\r\n        return newRoom;\r\n    }\r\n    deleteRoom(room) {\r\n        const index = this.rooms.indexOf(room);\r\n        if (index >= 0) {\r\n            utils_1.warn({ text: `DeleteRoom: ${this.rooms[index].name}` });\r\n            this.rooms.splice(index, 1);\r\n            room.destroy();\r\n        }\r\n    }\r\n    joinRoom(socket, roomName) {\r\n        let result = false;\r\n        for (let key in this.rooms) {\r\n            if (this.rooms[key].name === roomName && this.rooms[key].joinable) {\r\n                utils_1.log({ text: `JoinRoom: ${socket.id}, ${this.rooms[key].name}` });\r\n                result = true;\r\n                socket.join(this.rooms[key].name);\r\n                this.rooms[key].join(socket.id);\r\n                this.userDict[socket.id] = roomName;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    leaveRoom(socket, roomName) {\r\n        let result = false;\r\n        for (let key in this.rooms) {\r\n            if (this.rooms[key].name === roomName) {\r\n                utils_1.warn({ text: `LeaveRoom: ${socket.id}, ${this.rooms[key].name}` });\r\n                result = true;\r\n                socket.leave(this.rooms[key].name);\r\n                this.rooms[key].leave(socket.id);\r\n                delete this.userDict[socket.id];\r\n                if (this.rooms[key].members.length <= 0) {\r\n                    this.deleteRoom(this.rooms[key]);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    disconnect(socket) {\r\n        this.leaveRoom(socket, this.userDict[socket.id]);\r\n    }\r\n    getRoomName() {\r\n        this.count++;\r\n        return `Room${this.count}`;\r\n    }\r\n}\r\nexports.RoomManager = RoomManager;\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"../utils/utils\");\r\nclass Updater {\r\n    constructor() {\r\n        this.time = 0;\r\n        this.updateCount = 0;\r\n        this.GAME_UPDATE_MILLISEC = 8;\r\n        this.AVERAGE_LOOPING = 30;\r\n    }\r\n    onUpdate(callback) {\r\n        let lastTime = Date.now();\r\n        this.updaterID = setInterval(() => __awaiter(this, void 0, void 0, function* () {\r\n            const dt = Date.now() - lastTime;\r\n            this.performanceCheck(dt);\r\n            yield callback(dt);\r\n            lastTime += dt;\r\n        }), this.GAME_UPDATE_MILLISEC);\r\n    }\r\n    performanceCheck(dt) {\r\n        this.time += dt;\r\n        this.updateCount++;\r\n        // 125번 Update가 Maximum 성능이 20% 이상 다운되었을 경우 Warning Log띄우기.\r\n        if (this.time >= 1000 * this.AVERAGE_LOOPING) {\r\n            const ups = this.updateCount / this.AVERAGE_LOOPING;\r\n            if (this.updateCount < 1000 / this.GAME_UPDATE_MILLISEC * this.AVERAGE_LOOPING * 0.8) {\r\n                utils_1.warn({ text: `update: ${ups.toFixed(2)} ups (${(ups / (1000 / this.GAME_UPDATE_MILLISEC) * 100).toFixed(2)}%)` });\r\n                if (this.updateCount < 1000 / this.GAME_UPDATE_MILLISEC * this.AVERAGE_LOOPING * 0.2) {\r\n                    this.forceDisConnect ? this.forceDisConnect() : null;\r\n                }\r\n            }\r\n            else {\r\n                utils_1.system({ text: `update: ${ups.toFixed(2)} ups (${(ups / (1000 / this.GAME_UPDATE_MILLISEC) * 100).toFixed(2)}%)` });\r\n            }\r\n            this.time = this.updateCount = 0;\r\n        }\r\n    }\r\n    stop() {\r\n        clearInterval(this.updaterID);\r\n    }\r\n}\r\nexports.default = Updater;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst debug = require(\"debug\");\r\nconst App_1 = require(\"./App\");\r\nconst gameServer_1 = require(\"./game/gameServer\");\r\ndebug('ts-express:server');\r\n// express 서버.\r\nconst app = new App_1.default();\r\napp.init();\r\napp.createServer();\r\n// 게임의 진행을 담당하는 소켓서버이다.\r\nconst gameServer = new gameServer_1.default();\r\ngameServer.createSocketServer(app.server);\r\n","\"use strict\";\r\n/*\r\nReset = \"\\x1b[0m\"\r\nBright = \"\\x1b[1m\"\r\nDim = \"\\x1b[2m\"\r\nUnderscore = \"\\x1b[4m\"\r\nBlink = \"\\x1b[5m\"\r\nReverse = \"\\x1b[7m\"\r\nHidden = \"\\x1b[8m\"\r\n\r\nFgBlack = \"\\x1b[30m\"\r\nFgRed = \"\\x1b[31m\"\r\nFgGreen = \"\\x1b[32m\"\r\nFgYellow = \"\\x1b[33m\"\r\nFgBlue = \"\\x1b[34m\"\r\nFgMagenta = \"\\x1b[35m\"\r\nFgCyan = \"\\x1b[36m\"\r\nFgWhite = \"\\x1b[37m\"\r\n\r\nBgBlack = \"\\x1b[40m\"\r\nBgRed = \"\\x1b[41m\"\r\nBgGreen = \"\\x1b[42m\"\r\nBgYellow = \"\\x1b[43m\"\r\nBgBlue = \"\\x1b[44m\"\r\nBgMagenta = \"\\x1b[45m\"\r\nBgCyan = \"\\x1b[46m\"\r\nBgWhite = \"\\x1b[47m\"\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction gameLog(data) {\r\n    if (data.ping) {\r\n        if (data.ping > 100) {\r\n            console.log('[\\x1b[33m%s\\x1b[0m] %s \\x1b[31m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n        else if (data.ping > 50) {\r\n            console.log('[\\x1b[33m%s\\x1b[0m] %s \\x1b[37m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n        else {\r\n            console.log('[\\x1b[33m%s\\x1b[0m] %s \\x1b[32m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n    }\r\n    else {\r\n        console.log('[\\x1b[33m%s\\x1b[0m] %s', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text);\r\n    }\r\n}\r\nexports.gameLog = gameLog;\r\nfunction log(data) {\r\n    if (data.ping) {\r\n        if (data.ping > 100) {\r\n            console.log('[\\x1b[36m%s\\x1b[0m] %s \\x1b[31m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n        else if (data.ping > 50) {\r\n            console.log('[\\x1b[36m%s\\x1b[0m] %s \\x1b[37m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n        else {\r\n            console.log('[\\x1b[36m%s\\x1b[0m] %s \\x1b[32m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n    }\r\n    else {\r\n        console.log('[\\x1b[36m%s\\x1b[0m] %s', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text);\r\n    }\r\n}\r\nexports.log = log;\r\nfunction warn(data) {\r\n    if (data.ping) {\r\n        if (data.ping > 100) {\r\n            console.log('[\\x1b[31m%s\\x1b[0m] %s \\x1b[31m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n        else if (data.ping > 50) {\r\n            console.log('[\\x1b[31m%s\\x1b[0m] %s \\x1b[37m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n        else {\r\n            console.log('[\\x1b[31m%s\\x1b[0m] %s \\x1b[32m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n    }\r\n    else {\r\n        console.log('[\\x1b[31m%s\\x1b[0m] %s', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text);\r\n    }\r\n}\r\nexports.warn = warn;\r\nfunction system(data) {\r\n    if (data.ping) {\r\n        if (data.ping > 100) {\r\n            console.log('[\\x1b[32m%s\\x1b[0m] %s \\x1b[31m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n        else if (data.ping > 50) {\r\n            console.log('[\\x1b[32m%s\\x1b[0m] %s \\x1b[37m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n        else {\r\n            console.log('[\\x1b[32m%s\\x1b[0m] %s \\x1b[32m(%s ms)\\x1b[0m', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text, data.ping);\r\n        }\r\n    }\r\n    else {\r\n        console.log('[\\x1b[32m%s\\x1b[0m] %s', format(new Date(), 'yyyy년MM월dd일HH:mm:ss'), data.text);\r\n    }\r\n}\r\nexports.system = system;\r\nfunction normalizePort(val) {\r\n    const normalizedPort = (typeof val === 'string') ? parseInt(val, 10) : val;\r\n    if (isNaN(normalizedPort)) {\r\n        return val;\r\n    }\r\n    else if (normalizedPort >= 0) {\r\n        return normalizedPort;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nexports.normalizePort = normalizePort;\r\nfunction isNested(a, b) {\r\n    if (a.min <= b.max && a.max >= b.min) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nexports.isNested = isNested;\r\nfunction isBounded(a, b) {\r\n    if (a.min <= b.min && a.max >= b.max) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nexports.isBounded = isBounded;\r\nfunction max(a, b) {\r\n    return a > b ? a : b;\r\n}\r\nexports.max = max;\r\nfunction min(a, b) {\r\n    return a < b ? a : b;\r\n}\r\nexports.min = min;\r\nfunction format(date, format) {\r\n    const weekName = [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"];\r\n    let h;\r\n    return format.replace(/(yyyy|yy|MM|dd|E|hh|mm|ss|a\\/p)/gi, function ($1) {\r\n        switch ($1) {\r\n            case \"yyyy\": return date.getFullYear();\r\n            case \"yy\": return (date.getFullYear() % 1000).toString().slice(0, 2);\r\n            case \"MM\": return (date.getMonth() + 1).toString().slice(0, 2);\r\n            case \"dd\": return date.getDate().toString().slice(0, 2);\r\n            case \"E\": return weekName[date.getDay()];\r\n            case \"HH\": return (date.getHours() < 10 ? '0' + date.getHours() : date.getHours().toString()).slice(0, 2);\r\n            case \"hh\": return ((h = date.getHours() % 12) ? h : 12).toString().slice(0, 2);\r\n            case \"mm\": return (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes().toString()).slice(0, 2);\r\n            case \"ss\": return (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds().toString()).slice(0, 2);\r\n            case \"a/p\": return date.getHours() < 12 ? \"오전\" : \"오후\";\r\n            default: return $1;\r\n        }\r\n    });\r\n}\r\n;\r\n","module.exports = require(\"body-parser\");","module.exports = require(\"debug\");","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"morgan\");","module.exports = require(\"socket.io\");"],"sourceRoot":""}